#!/usr/bin/env python3

import click
@click.command()
@click.option('-v', '--verbosity', count=True, help="Verbosity level")
@click.option('--mjd', default=None, type=int, help="Modified Julian date to query. Use negative values to indicate relative to current MJD.")
@click.option('--mjd-start', default=None, type=int, help="Start of MJD range to query")
@click.option('--mjd-end', default=None, type=int, help="End of MJD range to query")
@click.option('--date', default=None, type=str, help="Date to query (e.g., 2024-01-15)")
@click.option('--date-start', default=None, type=str, help="Start of date range to query")
@click.option('--date-end', default=None, type=str, help="End of date range to query")
@click.option('--all', "all_time", is_flag=True, help="Include all MJDs")
@click.option('--apo', is_flag=True, help="Query Apache Point Observatory data")
@click.option('--lco', is_flag=True, help="Query Las Campanas Observatory data")
@click.option('--processes', '-p', default=None, type=int, help="Number of processes to use")
def sync(verbosity, mjd, mjd_start, mjd_end, date, date_start, date_end, all_time, apo, lco, processes):
    """
    Scrape metadata from raw exposures and update the almanac database.
    """
            
    from tqdm import tqdm
    from itertools import product

    from almanac import (apogee, io, utils)
    from almanac.models.apogee import Exposure

    Exposure.create_table()

    tqdm_kwds = dict(disable=(verbosity < 1))
    
    mjds = utils.parse_mjds(mjd, mjd_start, mjd_end, date, date_start, date_end, all_time, earliest_mjd=55139) # APOGEE specific
    observatories = utils.get_observatories(apo, lco)
    iterable = product(observatories, mjds)    

    # TODO: Skip over observatory/mjds for which we already have something in the Exposure table?

    exposures = []
    if processes is not None:
        # Parallel
        import os
        import signal
        import concurrent.futures
        with concurrent.futures.ProcessPoolExecutor(max_workers=processes) as pool:
            futures = []
            for total, (observatory, mjd) in enumerate(iterable, start=1):
                futures.append(pool.submit(apogee.get_exposure_metadata_as_list, observatory, mjd))

            with tqdm(total=total, **tqdm_kwds) as pb:
                try:                
                    for future in concurrent.futures.as_completed(futures):
                        pb.update()
                        r = future.result()
                        if r is None or len(r) == 0: 
                            continue                
                        exposures.extend([Exposure(**apogee.parse_exposure_metadata(item)) for item in r])

                except KeyboardInterrupt:
                    for pid in pool._processes:
                        os.kill(pid, signal.SIGKILL)
                    pool.shutdown(wait=False, cancel_futures=True)                
                    raise KeyboardInterrupt
    
    else:
        for observatory, mjd in tqdm(iterable, total=len(mjds) * len(observatories), **tqdm_kwds):
            for result in apogee.get_exposure_metadata(observatory, mjd):
                exposures.append(Exposure(**apogee.parse_exposure_metadata(result)))

    # Bulk create the exposures.
    Exposure.bulk_create(exposures, batch_size=1_000)

    # Create visits based on all exposures
    

if __name__ == '__main__':
    sync()
